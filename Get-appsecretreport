<#        
 Using Minigraph module 
 ======================

.DISCLAIMER
    THE SAMPLE SCRIPTS ARE NOT SUPPORTED UNDER ANY MICROSOFT STANDARD SUPPORT
    PROGRAM OR SERVICE. THE SAMPLE SCRIPTS ARE PROVIDED AS IS WITHOUT WARRANTY
    OF ANY KIND. MICROSOFT FURTHER DISCLAIMS ALL IMPLIED WARRANTIES INCLUDING, WITHOUT
    LIMITATION, ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR OF FITNESS FOR A PARTICULAR
    PURPOSE. THE ENTIRE RISK ARISING OUT OF THE USE OR PERFORMANCE OF THE SAMPLE SCRIPTS
    AND DOCUMENTATION REMAINS WITH YOU. IN NO EVENT SHALL MICROSOFT, ITS AUTHORS, OR
    ANYONE ELSE INVOLVED IN THE CREATION, PRODUCTION, OR DELIVERY OF THE SCRIPTS BE LIABLE
    FOR ANY DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS
    PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR OTHER PECUNIARY LOSS)
    ARISING OUT OF THE USE OF OR INABILITY TO USE THE SAMPLE SCRIPTS OR DOCUMENTATION,
    EVEN IF MICROSOFT HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES 
 
 
======================
 
#>



[cmdletbinding()]
param (
    $tennantname = 'XXXXX', #Please change the same as per your environment.
    $OrgName = 'XXXXX, #Please change the same as per your environment.
    $AppId = "XXXXX" , #Please change the same as per your environment.
    $TenantId = "XXXXX" , #Please change the same as per your environment.
    $AppSecret = "XXXXX" , #Please change the same as per your environment.
    $outpath = "C:\temp\scripts\ADlist_RETRO_$(Get-Date -Format "MM-dd-yyyy-hh-mm").csv" #Please change the same as per your environment.
)
$expiryCheck = 10 #Please change the same as per your environment.
Import-module Minigraph
$logfilepath = "C:\Temp\$(Get-Date -Format "MM-dd-yyyy-hh-mm").log" #Please change the same as per your environment.
 
function Write-tologfile {
    param (
        $Message
    )
    Add-Content $logfilepath -Value $Message
}
Remove-Item $logfilepath -ErrorAction Ignore
 
$now = (Get-Date).ToUniversalTime() 
$expiryLimit = $now.AddDays($expiryCheck)
Connect-GraphClientSecret -ClientID $AppId -ClientSecret ($AppSecret | ConvertTo-SecureString -AsPlainText -Force) -TenantID $TenantId -Scopes https://graph.microsoft.com/.default
 
$aadApps = Invoke-GraphRequest -Query applications
 
$results = foreach ($app in $aadApps | Sort-Object -Property createdDateTime -Descending) {
    # Report Output    
    $reportData = [pscustomobject][ordered]@{ 
        displayName         = $app.displayName
        createdDateTime     = $app.createdDateTime
        Enddate             = $null
        passwordCredentials = $null
         }
   
    # Key Expiry
    if ($app.keyCredentials) {
        $keys = foreach ($cred in $app.keyCredentials) {
            [datetime]$keyExpiry = $cred.endDateTime
            if ($keyExpiry -lt $expiryLimit) {
                Write-Warning "$($app.displayName): Key expired/expiring on $($keyExpiry)"
                Write-tologfile "$($app.displayName): Key expired/expiring on $($keyExpiry)"
            }
            $keyExpiry
        }
        $reportData.Enddate = @($keys)
    }
 
    # Password Expiry
    if ($app.passwordCredentials) {
        $passwords = foreach ($cred in $app.passwordCredentials) {
            [datetime]$keyExpiry = $cred.endDateTime
            if ($keyExpiry -lt $expiryLimit) {
                Write-Warning "$($app.displayName): Password expired/expiring on $($keyExpiry)"
                Write-tologfile "$($app.displayName): Password expired/expiring on $($keyExpiry)"
            }
            $keyExpiry
        }
        $reportData.passwordCredentials = @($passwords)
    }
 
    $reportData
}
$results | Select-Object @(
    'displayName'
    'createdDateTime'
    @{ Name = 'Certificate EndDate'; Expression = { $_.Enddate -join "," } }
    @{ Name = 'APP KEY EXPIRY DATE'; Expression = { $_.passwordCredentials -join "," } }
)| Export-Csv -Path $outpath
$results
